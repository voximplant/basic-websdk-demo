image: node:10

stages:
  - build
  - publish

before_script:
  - npm -v
  - node -v

build_prod:
  tags:
    - docker
  script:
    - npm install
    - cd ./src
    - tar -czf ../build.tar.gz *
  only:
    - master
  stage: build
  artifacts:
    expire_in: 1 week
    paths:
      - build.tar.gz

build_dev:
  tags:
    - docker
  script:
    - npm install
    - npm install replace -g
    - cd ./src
    - replace 'https://unpkg.com/voximplant-websdk' $DEV_BUILD index.html
    - tar -czf ../build.tar.gz *
  only:
    - merge_requests
  except:
    variables:
      - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
  stage: build
  artifacts:
    expire_in: 1 week
    paths:
      - build.tar.gz

.tpl_publish: &tpl_publish
  tags:
    - docker
  script:
    - echo "$SSH_KEY" > ./stage_key
    - mkdir ~/.ssh
    - ssh-keyscan $HOST >> ~/.ssh/known_hosts
    - chmod 700 ./stage_key
    - ssh -i ./stage_key -o "StrictHostKeyChecking=no" $USER@$HOST
    - scp -i ./stage_key ./build.tar.gz $USER@$HOST:~
    - ssh -i ./stage_key $USER@$HOST "tar -zxf build.tar.gz -C $FILE_PATH"
    - ssh -i ./stage_key $USER@$HOST "rm build.tar.gz"

publish_prod:
  <<: *tpl_publish
  dependencies:
    - build_prod
  stage: publish
  when: manual
  only:
    - master
  variables:
    SSH_KEY: $PROD_KEY
    HOST: $PROD_RU
    USER: $PROD_CI
    FILE_PATH: $PROD_PATH

publish_dev:
  <<: *tpl_publish
  dependencies:
    - build_dev
  stage: publish
  when: manual
  only:
    - merge_requests
  except:
    variables:
      - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
  variables:
    SSH_KEY: $PROD_KEY
    HOST: $PROD_RU
    USER: $PROD_CI
    FILE_PATH: $DEV_PATH